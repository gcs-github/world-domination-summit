// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.Collection.Lunr = (function(_super) {
    __extends(Lunr, _super);

    Lunr.prototype.lunroptions = {
      fields: []
    };

    function Lunr(models, options) {
      this.search = __bind(this.search, this);
      this.processTerm = __bind(this.processTerm, this);
      this.reset = __bind(this.reset, this);
      this._lunrChange = __bind(this._lunrChange, this);
      this._lunrRemove = __bind(this._lunrRemove, this);
      this._lunrAdd = __bind(this._lunrAdd, this);
      this._lunrInitialize = __bind(this._lunrInitialize, this);
      this._lunrInitialize()
      Lunr.__super__.constructor.call(this, models, options);
      this.on("add", this._lunrAdd);
      this.on("remove", this._lunrRemove);
      this.on("change", this._lunrChange);
      return;
    }

    Lunr.prototype._lunrInitialize = function() {
      var _coll;
      _coll = this;
      _coll._lunrFields = [];
      return this._lunrIndex = lunr(function() {
        var field, _i, _len, _opt, _ref;
        if (_.isFunction(_coll.lunroptions)) {
          _opt = _coll.lunroptions(opt);
        } else {
          _opt = _.extend({}, _coll.lunroptions || (_coll.lunroptions = {}));
        }
        this.ref("cid");
        _ref = _opt.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          _coll._lunrFields.push(field.name);
          this.field(field.name, _.omit(field, ["isID", "name"]));
        }
      });
    };

    Lunr.prototype._lunrAdd = function(model) {
      var field, _i, _len, _model, _ref;
      _model = model.toJSON();
      _model.cid = model.cid;
      _ref = this._lunrFields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (_model[field] == null) {
          _model[field] = "";
        } else {
          _model[field] = _model[field].toString();
        }
      }
      this._lunrIndex.add(_model);
    };

    Lunr.prototype._lunrRemove = function(model) {
      var _model;
      _model = model.toJSON();
      _model.cid = model.cid;
      this._lunrIndex.remove(_model);
    };

    Lunr.prototype._lunrChange = function(model) {
      var field, _i, _len, _model, _ref;
      _model = model.toJSON();
      _model.cid = model.cid;
      _ref = this._lunrFields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (_model[field] == null) {
          _model[field] = "";
        } else {
          _model[field] = _model[field].toString();
        }
      }
      this._lunrIndex.update(_model);
    };

    Lunr.prototype.reset = function(models, options) {
      var model, _i, _len, _ref;
      this._lunrInitialize();
      Lunr.__super__.reset.call(this, models, options);
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        this._lunrAdd(model);
      }
      return this;
    };

    Lunr.prototype.processTerm = function(term) {
      return term;
    };

    Lunr.prototype.search = function(term, raw) {
      var idx, res, _lunrRes, _res;
      if (raw == null) {
        raw = false;
      }
      _lunrRes = this._lunrIndex.search(this.processTerm(term));
      if (raw) {
        return _lunrRes;
      }
      _res = (function() {
        var _i, _len, _results;
        _results = [];
        for (idx = _i = 0, _len = _lunrRes.length; _i < _len; idx = ++_i) {
          res = _lunrRes[idx];
          _results.push(this.get(res.ref));
        }
        return _results;
      }).call(this);
      _res.toJSON = function(options) {
        var model, _json;
        _json = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            model = this[_i];
            _results.push(model.toJSON(options));
          }
          return _results;
        }).call(this);
        return _json;
      };
      return _res;
    };

    return Lunr;

  })(Backbone.Collection);

}).call(this);